<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zaragoto&#39;s blog</title>
    <link>https://zaragoto322.github.io/</link>
    <description>Recent content on zaragoto&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sat, 24 Jul 2021 22:47:03 +0800</lastBuildDate><atom:link href="https://zaragoto322.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue的两个版本</title>
      <link>https://zaragoto322.github.io/posts/vue%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC/</link>
      <pubDate>Sat, 24 Jul 2021 22:47:03 +0800</pubDate>
      
      <guid>https://zaragoto322.github.io/posts/vue%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%89%88%E6%9C%AC/</guid>
      <description>Vue有哪两个版本 Vue有完整版和不完整版（运行时版），文件名分别为Vue.js和Vue.runtime.js。 其中完整版带compiler（编译器，用来将模板字符串编译成为 JavaScript 渲染函数的代码），占用了较大的体积。 对于创建标签的方法，两者也有不同。完整版可以写在HTML里或template里；非完整版可以写在render函数里，用h（变量）来创建标签。 一般推荐使用非完整版，然后用vue-loader和bue文件配合使用。  template和render如何使用 template和render是Vue的两种渲染方式 1. template与render函数对比 template----html的方式做渲染 render----js的方式做渲染 render是一种编译方式 render里有一个函数h，这个h的作用是将单文件组件进行虚拟DOM的创建，然后再通过render进行解析。 h就是createElement()方法：createElement(标签名称,属性配置,children) template也是一种编译方式，但是template最终还是要通过render的方式再次进行编译。 2.两种方式如何使用 2.1 template如何使用 templatel需要完整版的Vue，或者可以用一些loader支持。 template可以用形如下列的形式使用 ```bash &amp;lt;template&amp;gt; &amp;lt;div&amp;gt;hello&amp;lt;div.&amp;gt; &amp;lt;template/&amp;gt; ``` template的实现像是写html文件一样 2.2 render如何使用 render可以在非完整版下使用。 render可以用形如下列的形式使用 ```bash render(h) { h(&#39;div&#39;) } ``` render的实现像是用原生js的方式创建DOM节点来实现  如何用codesandbox.io写Vue代码 1.进入codesandbox.io网页，选择Vue ![](/image/forblog/01.png) 可以看到，codesandbox已经预先创建好了文件 ![](/image/forblog/02.png) 可以线上完成代码的编写后，再下载到本地 2.下载到本地及启动 如图所示，可以下载编译好的ZIP文件 ![](/image/forblog/04.png) 根据package.json中的代码，本地可以用yarn serve或npm run serve等运行scripts里的命令，来启动Vue项目 ![](/image/forblog/03.png)  </description>
    </item>
    
    <item>
      <title>Js的继承</title>
      <link>https://zaragoto322.github.io/posts/js%E7%9A%84%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Mon, 10 May 2021 16:57:55 +0800</pubDate>
      
      <guid>https://zaragoto322.github.io/posts/js%E7%9A%84%E7%BB%A7%E6%89%BF/</guid>
      <description>转载一篇博客，关于js的6种继承方式 https://www.cnblogs.com/ranyonsue/p/11201730.html</description>
    </item>
    
    <item>
      <title>一个加法运算符的例子</title>
      <link>https://zaragoto322.github.io/posts/%E4%B8%80%E4%B8%AA%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Wed, 28 Apr 2021 21:30:43 +0800</pubDate>
      
      <guid>https://zaragoto322.github.io/posts/%E4%B8%80%E4%B8%AA%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BE%8B%E5%AD%90/</guid>
      <description>对于加法运算符，在应用的过程中有两个例子，如下所示
  let a = 1 console.log( a+++a )
  let a = 1 console.log( a+a++ )
  在例子1中会输出的值为3；在例子2中会输出的值是2
因为在a+++a的执行过程中，实现了a=a++的过程，使得a=2。在（a++）+a的过程中，后面的a的值使用了临时内存里的a的值变成了2，整个过程变成了：（1++）+2=3
在a+a++的过程中，实际上就是a+a，计算完之后a再自增1，故值为2</description>
    </item>
    
    <item>
      <title>博客开通了~</title>
      <link>https://zaragoto322.github.io/posts/%E5%8D%9A%E5%AE%A2%E5%BC%80%E9%80%9A%E4%BA%86~/</link>
      <pubDate>Wed, 28 Apr 2021 20:46:52 +0800</pubDate>
      
      <guid>https://zaragoto322.github.io/posts/%E5%8D%9A%E5%AE%A2%E5%BC%80%E9%80%9A%E4%BA%86~/</guid>
      <description>大家好~ 我的博客开通了，希望能写出一些好内容</description>
    </item>
    
  </channel>
</rss>
